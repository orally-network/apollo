type AddChainRequest = record {
  chain_rpc : text;
  timer_frequency : nat64;
  chain_id : nat;
};
type ApolloError = variant {
  UtilsError : UtilsError;
  ApolloInstanceError : ApolloInstanceError;
};
type ApolloInstance = record { canister_id : principal; is_active : bool };
type ApolloInstanceError = variant {
  TimerIsNotInitialized;
  BalancesError : BalancesError;
  UtilsError : UtilsError;
  Web3Error : Web3Error;
  FailedToInstallCode : text;
  ApolloCoordinatorPoolingError : text;
  FailedToCreate : text;
  ChainAlreadyExists : nat;
  TxWasNotSentToAMA;
};
type BalancesError = variant {
  NotEnoughFunds;
  BalanceAlreadyExists;
  UtilsError : UtilsError;
  NonceIsTooLow;
  BalanceDoesNotExist;
};
type Metadata = record {
  timer_frequency : nat;
  apollo_evm_contract : text;
  key_name : text;
  tx_fee : nat;
};
type Result = variant { Ok; Err : ApolloError };
type UtilsError = variant {
  FromHexError : text;
  FailedToGetApolloEvmAddress : text;
  InvalidAddressFormat : text;
};
type Web3Error = variant {
  UnableToEstimateGas : text;
  TxHasFailed;
  TxWithoutReceiver;
  UnableToSignContractCall : text;
  UnableToDecodeOutput : text;
  UnableToCreateContract : text;
  UnableToGetTxReceipt : text;
  TxNotFound;
  UnableToCallContract : text;
  UtilsError : UtilsError;
  UnableToExecuteRawTx : text;
  UnableToGetNonce : text;
  UnableToGetGasPrice : text;
  TxTimeout;
  UnableToFormCallData : text;
  InvalidAddressFormat : text;
};
service : (nat, text, nat) -> {
  add_chain : (AddChainRequest) -> (Result);
  get_chains : () -> (vec record { nat32; ApolloInstance }) query;
  get_metadata : () -> (Metadata) query;
  test : () -> (Result);
}