type ApolloInstanceError = variant {
  FailedToUpgrade : text;
  FailedToStop : text;
  WithdrawRequestsError : WithdrawRequestsError;
  BalancesError : BalancesError;
  FailedToUpdateSettings : text;
  UtilsError : UtilsError;
  Web3Error : Web3Error;
  FailedToInstallCode : text;
  ApolloCoordinatorPoolingError : text;
  FailedToDelete : text;
  FailedToCreate : text;
  TxWasNotSentToAMA;
};
type ApolloInstanceInit = record {
  sybil_canister_address : text;
  chain_rpc : text;
  apollo_coordinator : text;
  chain_id : nat;
  multicall_address : text;
  key_name : text;
  block_gas_limit : nat;
  min_balance : nat;
  timer_frequency_sec : nat64;
  apollos_fee : nat;
};
type ApolloInstanceMetadata = record {
  sybil_canister_address : text;
  chain_rpc : text;
  apollo_coordinator : text;
  apollo_evm_address : opt text;
  chain_id : nat;
  multicall_address : text;
  key_name : text;
  block_gas_limit : nat;
  min_balance : nat;
  apollos_fee : nat;
};
type BalancesError = variant {
  NotEnoughFunds;
  BalanceAlreadyExists;
  UtilsError : UtilsError;
  NonceIsTooLow;
  BalanceDoesNotExist;
};
type Result = variant { Ok; Err : ApolloInstanceError };
type Result_1 = variant { Ok : text; Err : ApolloInstanceError };
type Result_2 = variant { Ok : nat; Err : ApolloInstanceError };
type UpdateMetadata = record {
  sybil_canister_address : opt text;
  chain_rpc : opt text;
  apollo_coordinator : opt text;
  chain_id : opt nat;
  multicall_address : opt text;
  block_gas_limit : opt nat;
  min_balance : opt nat;
  apollos_fee : opt nat;
};
type UtilsError = variant {
  FromHexError : text;
  NotAController;
  FailedToGetApolloEvmAddress : text;
  InvalidAddressFormat : text;
};
type Web3Error = variant {
  UnableToEstimateGas : text;
  TxHasFailed;
  TxWithoutReceiver;
  UnableToSignContractCall : text;
  UnableToDecodeOutput : text;
  UnableToCreateContract : text;
  UnableToGetTxReceipt : text;
  TxNotFound;
  UnableToCallContract : text;
  UtilsError : UtilsError;
  UnableToGetBlockNumber : text;
  UnableToExecuteRawTx : text;
  UnableToGetNonce : text;
  UnableToGetGasPrice : text;
  TxTimeout;
  UnableToFormCallData : text;
  InvalidAddressFormat : text;
  UnableToGetLogs : text;
};
type WithdrawRequestsError = variant {
  UnableToCleanWithdrawRequests : text;
  UnableToAddWithdrawRequest : text;
};
service : (ApolloInstanceInit) -> {
  deposit : (text, opt text, text, text) -> (Result);
  get_apollo_address : () -> (Result_1);
  get_balance : (text) -> (Result_2) query;
  get_metadata : () -> (ApolloInstanceMetadata) query;
  grant : (text, text, text) -> (Result);
  restrict : (text, text, text) -> (Result);
  start : () -> (Result);
  stop : () -> (Result);
  update_last_request_id : (opt nat64) -> (Result);
  update_metadata : (UpdateMetadata) -> (Result);
  update_timer_frequency_sec : (nat64) -> (Result);
  withdraw : (text, text, text) -> (Result);
}